name: Python Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov pytest-mock
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -e .
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest (unit tests)
      run: |
        pytest tests/ -v -m "not integration and not e2e" --cov=src/jfkreveal --cov-report=xml --cov-report=term
      env:
        # Use a dummy key for testing
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'sk-dummy-key-for-testing' }}
        OPENAI_EMBEDDING_MODEL: 'text-embedding-3-large'
        OPENAI_ANALYSIS_MODEL: 'gpt-4.5-preview'
    
    - name: Test with pytest (integration tests)
      run: |
        pytest tests/ -v -m "integration" --no-cov
      env:
        # Use a dummy key for testing
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'sk-dummy-key-for-testing' }}
        OPENAI_EMBEDDING_MODEL: 'text-embedding-3-large'
        OPENAI_ANALYSIS_MODEL: 'gpt-4.5-preview'
    
    - name: Upload coverage report to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
    
    - name: Check coverage threshold
      run: |
        COVERAGE_PERCENT=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(float(root.attrib['line-rate']) * 100)")
        echo "Coverage: $COVERAGE_PERCENT%"
        if (( $(echo "$COVERAGE_PERCENT < 90" | bc -l) )); then
          echo "Coverage is below 90% threshold: $COVERAGE_PERCENT%"
          exit 1
        else
          echo "Coverage threshold met: $COVERAGE_PERCENT%"
        fi